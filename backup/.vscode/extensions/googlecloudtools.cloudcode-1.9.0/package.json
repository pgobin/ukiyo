{
	"name": "cloudcode",
	"displayName": "Cloud Code",
	"description": "Makes developing with Kubernetes and Cloud Run feel like working on local code. Cloud Code from Google Cloud, IDE tools for Cloud Native development.",
	"version": "1.9.0",
	"publisher": "googlecloudtools",
	"engines": {
		"vscode": "^1.49.0"
	},
	"license": "SEE LICENSE IN LICENSE",
	"categories": [
		"Snippets",
		"Linters",
		"Debuggers",
		"Other",
		"Azure"
	],
	"keywords": [
		"Google",
		"Kubernetes",
		"k8s",
		"Azure",
		"AWS"
	],
	"preview": false,
	"qna": false,
	"icon": "images/logo.png",
	"activationEvents": [
		"*"
	],
	"main": "./dist/extension.js",
	"contributes": {
		"jsonValidation": [
			{
				"fileMatch": ".cctemplate",
				"url": "./schema/template_schema.json"
			}
		],
		"languages": [
			{
				"id": "ignore",
				"filenames": [
					".gcloudignore"
				]
			},
			{
				"id": "Log",
				"aliases": [
					"log"
				],
				"extensions": [
					".log"
				],
				"configuration": "./log.configuration.json",
				"mimetypes": [
					"log",
					"text/log",
					"text/x-log",
					"text/x-code-output",
					"x-code-output"
				]
			}
		],
		"grammars": [
			{
				"language": "Log",
				"scopeName": "code.log",
				"path": "./syntaxes/log.tmLanguage"
			}
		],
		"configurationDefaults": {
			"[yaml]": {
				"editor.insertSpaces": true,
				"editor.tabSize": 2,
				"editor.quickSuggestions": {
					"other": true,
					"comments": false,
					"strings": true
				},
				"editor.autoIndent": false
			}
		},
		"configuration": {
			"type": "object",
			"title": "Cloud Code",
			"properties": {
				"cloudcode.debug-kubernetes": {
					"type": "object",
					"description": "Provide customizations for the Cloud Code debuggers.",
					"properties": {
						"suppressNETCoreWarning": {
							"type": "boolean",
							"description": "If true, suppress .NET Core debug warning."
						},
						"suppressJavaWarning": {
							"type": "boolean",
							"description": "If true, suppress Java debug warning."
						},
						"suppressPythonWarning": {
							"type": "boolean",
							"description": "If true, suppress Python debug warning."
						},
						"suppressNodeJSWarning": {
							"type": "boolean",
							"description": "If true, suppress Node JS debug warning."
						},
						"suppressGoWarning": {
							"type": "boolean",
							"description": "If true, suppress Go debug warning."
						}
					}
				},
				"cloudcode.kubeconfigs": {
					"type": "array",
					"default": [],
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"description": "Name to reference the KubeConfig."
							},
							"configPath": {
								"type": "string",
								"description": "Full path to the KubeConfig file."
							}
						}
					},
					"markdownDescription": "List of KubeConfig files that can be used in the Kubernetes Explorer. Switch between the default KubeConfig and KubeConfigs listed here with the `#cloudcode.active-kubeconfig#` setting."
				},
				"cloudcode.active-kubeconfig": {
					"type": "string",
					"default": "",
					"markdownDescription": "Name of the active KubeConfig used by the extension. This name should match the name of a KubeConfig stored in `#cloudcode.kubeconfigs#`. If a name isn't provided, the default KubeConfig will be used."
				},
				"cloudcode.enableExperimentalDeploymentWizard": {
					"type": "boolean",
					"default": true,
					"description": "Enable the experimental deployment wizard that streamlines the deployment for existing kubernetes applications.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.enableBuildpacks": {
					"type": "boolean",
					"default": true,
					"description": "Enable buildpacks.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.enableDeployDebugV2": {
					"type": "boolean",
					"default": true,
					"description": "Enable the new deploy and debug flows.",
					"deprecationMessage": "Internal feature flag."
				},
				"cloudcode.enableMultiSkaffoldConfigsKey": {
					"type": "boolean",
					"default": false,
					"description": "Enable support for multiple skaffold configurations."
				},
				"cloudcode.enableTelemetry": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable sending usage data to Google. Data collected is subject to the [Google Privacy Policy](https://policies.google.com/privacy)."
				},
				"cloudcode.updateAdcOnLogin": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Append a `â€”-update-adc` flag to `gcloud auth login`. [Read about this flag](https://cloud.google.com/sdk/gcloud/reference/auth/login#--update-adc)."
				},
				"cloudcode.updateChannel": {
					"type": "string",
					"enum": [
						"Default",
						"Insiders"
					],
					"description": "Automatically install the insiders version of Cloud Code by changing this value to 'Insiders', or set the value as 'Default' to use the stable released version from the marketplace."
				},
				"cloudcode.enableMinikubeGcpAuthPlugin": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable the [minikube gcp-auth plugin](https://minikube.sigs.k8s.io/docs/handbook/addons/gcp-auth/) when starting a Cloud Code run or debug session that is deploying to minikube."
				},
				"cloudcode.enableConfigLessExperience": {
					"type": "boolean",
					"default": false,
					"markdownDescription": "Enable the experimental config-less run/debug experience for Kubernetes and Cloud Run apps."
				},
				"cloudcode.yaml.trace.server": {
					"type": "string",
					"enum": [
						"off",
						"messages",
						"verbose"
					],
					"default": "off",
					"description": "Trace the communication between VSCode and the language server in an output window."
				},
				"cloudcode.yaml.schemas": {
					"type": "object",
					"default": {},
					"description": "Associate schemas to YAML files in the current workspace."
				},
				"cloudcode.yaml.format.enable": {
					"type": "boolean",
					"default": false,
					"description": "Enable default YAML formatter (requires restart)."
				},
				"cloudcode.yaml.format.singleQuote": {
					"type": "boolean",
					"default": false,
					"description": "Use single quotes instead of double quotes."
				},
				"cloudcode.yaml.format.bracketSpacing": {
					"type": "boolean",
					"default": true,
					"description": "Print spaces between brackets in objects."
				},
				"cloudcode.yaml.format.proseWrap": {
					"type": "string",
					"default": "preserve",
					"enum": [
						"preserve",
						"never",
						"always"
					],
					"enumDescriptions": [
						"Wrap prose; if it exceeds print-width.",
						"Never wrap; keep prose on the same line.",
						"Keep prose as-is."
					],
					"description": "Choose when to automatically wrap prose."
				},
				"cloudcode.yaml.validate": {
					"type": "boolean",
					"default": true,
					"description": "Enable validation feature."
				},
				"cloudcode.yaml.hover": {
					"type": "boolean",
					"default": true,
					"description": "Enable hover feature."
				},
				"cloudcode.yaml.completion": {
					"type": "boolean",
					"default": true,
					"description": "Enable YAML code completion."
				},
				"cloudcode.yaml.customTags": {
					"type": "array",
					"default": [],
					"description": "Custom tags the parser should recognize and validate against."
				},
				"cloudcode.yaml.clusterResourceCompletion": {
					"type": "boolean",
					"default": true,
					"description": "Enable resource completions from the active cluster. This setting may impact completion performance."
				},
				"cloudcode.yaml.yamlFileMatcher": {
					"type": "string",
					"default": "**/*.yaml",
					"markdownDescription": "Glob pattern matching YAML files in the workspace. YAML editing support such as completion, inline definitions, and linting would be available for this file type. Read more about glob patterns [here](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options)."
				},
				"cloudcode.yaml.enableKubernetesSupport": {
					"type": "boolean",
					"default": true,
					"description": "Enable Kubernetes YAML editing support."
				},
				"cloudcode.yaml.enableMigrateForAnthosSupport": {
					"type": "boolean",
					"default": true,
					"description": "Enable Migrate for Anthos YAML editing support."
				},
				"cloudcode.yaml.kubernetesVersion": {
					"type": "string",
					"default": "v1.17.0",
					"enum": [
						"v1.12.0",
						"v1.13.0",
						"v1.14.0",
						"v1.15.0",
						"v1.16.0",
						"v1.17.0"
					],
					"description": "Select the Kubernetes version Cloud Code should utilize when providing YAML editing support."
				},
				"cloudcode.yaml.crdSchemaLocations": {
					"type": "array",
					"item": {
						"type": "string"
					},
					"default": [],
					"markdownDescription": "Array of locations pointing to Kubernetes CRD schema. Each of these can be set to a local path (example: `/files/crd.yaml`) or URL (example: `http://github.com/user/repo/crd.yaml`)."
				},
				"cloudcode.cloudshell.project": {
					"type": "string",
					"default": "",
					"markdownDescription": "Default project to use in Cloud Shell. If not set, the existing default will be used or you will be prompted to set one. For more information on how to get started with developing in a Cloud Shell environment, view this [quickstart](https://cloud.google.com/code/docs/vscode/quickstart-remote-dev)."
				},
				"cloudcode.aws": {
					"type": "object",
					"description": "Provide customizations for Amazon Elastic Container Service for Kubernetes (Amazon EKS) support in Cloud Code.",
					"properties": {
						"eksctlPath": {
							"type": "string",
							"description": "Path to the 'eksctl' binary"
						}
					},
					"default": {
						"eksctlPath": ""
					}
				},
				"cloudcode.awsExplorerVisible": {
					"type": "boolean",
					"default": false,
					"description": "Display the Amazon EKS cluster explorer.",
					"deprecationMessage": "Internal state variable."
				},
				"cloudcode.azureExplorerVisible": {
					"type": "boolean",
					"default": false,
					"description": "Display the Azure Kubernetes Service cluster explorer.",
					"deprecationMessage": "Internal state variable."
				},
				"cloudcode.autoDependencies": {
					"type": "string",
					"default": "on",
					"enum": [
						"on",
						"off"
					],
					"markdownDescription": "Automatically install and update required Cloud Code dependencies such as the [Cloud SDK](https://cloud.google.com/sdk/gcloud), [Skaffold](https://skaffold.dev/), [minikube](https://minikube.sigs.k8s.io/docs/), and [Kubectl](https://kubernetes.io/docs/reference/kubectl/overview/)."
				},
				"cloudcode.verboseLogging": {
					"type": "boolean",
					"default": false,
					"description": "Display extension debug information in the 'Cloud Code' output window."
				},
				"cloudcode.minikubeStatusBar": {
					"type": "boolean",
					"default": true,
					"description": "Display minikube status in the status bar."
				},
				"cloudcode.enableCustomTemplates": {
					"type": "boolean",
					"default": true,
					"description": "Enable Custom Template Support",
					"deprecationMessage": "Internal feature flag"
				},
				"cloudcode.customTemplates": {
					"type": "array",
					"default": [],
					"items": {
						"type": "object",
						"properties": {
							"branchName": {
								"type": "string",
								"description": "Branch name in git repository",
								"default": ""
							},
							"repoUrl": {
								"type": "string",
								"description": "Git path pointing to the repository",
								"default": ""
							},
							"localPath": {
								"type": "string",
								"description": "Folder where the template repository has been stored locally",
								"default": ""
							}
						}
					},
					"description": "List of custom templates in Cloud Code"
				},
				"cloudcode.enableGkeAutopilotSupport": {
					"type": "boolean",
					"default": true,
					"markdownDescription": "Enable deployment support for GKE-Autopilot clusters"
				}
			}
		},
		"debuggers": [
			{
				"type": "cloudcode",
				"label": "Cloud Code",
				"configurationAttributes": {
					"attach": {
						"properties": {
							"language": {
								"type": "string",
								"enum": [
									"Node",
									"NETCore",
									"Java",
									"Python",
									"Go"
								],
								"description": "Programming language of the application being debugged.",
								"default": null
							},
							"debugPort": {
								"type": "number",
								"description": "Debug Port used on the container.",
								"default": 9229
							},
							"remoteRoot": {
								"type": "string",
								"description": "Absolute path to the remote directory containing the program",
								"default": "Path to the Remote Directory Containing the Program"
							},
							"podSelector": {
								"type": "object",
								"description": "Selector to choose debugging pod. Usually a dictionary where key is app and value is the name of the deployment will suffice. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more information.",
								"default": {
									"app": "deployment-name"
								}
							},
							"localRoot": {
								"type": "string",
								"description": "Path to the local directory containing the program",
								"default": "^\"\\${workspaceFolder}\""
							},
							"containerName": {
								"type": "string",
								"description": "Name of the container to be debugged. This field will only be used if more than one container is found in the pod.",
								"default": "container-name"
							},
							"protocol": {
								"type": "string",
								"enum": [
									"auto",
									"inspector",
									"legacy"
								],
								"description": "Node.js debug protocol used",
								"default": "auto"
							}
						}
					}
				}
			},
			{
				"type": "cloudcode.kubernetes",
				"label": "Cloud Code: Kubernetes",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"skaffoldConfig": {
								"type": "string",
								"description": "Path to the skaffold configuration file used for running the app.",
								"default": "${workspaceFolder}/skaffold.yaml"
							},
							"profile": {
								"type": "string",
								"description": "Name of the skaffold profile. Remove this field to use the default profile.",
								"default": "profile-name"
							},
							"imageRegistry": {
								"type": "string",
								"description": "Image registry to push the container images to. For example, gcr.io/{Google Cloud Project ID} or docker.io/{Repository Name}",
								"default": "gcr.io/${gcpProjectId}"
							},
							"watch": {
								"type": "boolean",
								"description": "Watches for changes in the workspace and re-runs the application. Defaults to true.",
								"default": true
							},
							"cleanUp": {
								"type": "boolean",
								"description": "Deployed kubernetes resources will be cleaned up after the application is terminated. Defaults to true.",
								"default": true
							},
							"portForward": {
								"type": "boolean",
								"description": "Forwards ports for exposed kubernetes resources on the cluster to your local machine. Defaults to true.",
								"default": true
							},
							"debug": {
								"type": "array",
								"items": {
									"properties": {
										"image": {
											"type": "string",
											"description": "The name of the container image."
										},
										"sourceFileMap": {
											"type": "object",
											"description": "Path mapping used by the debugger. The key is the local path and the value is the path on the remote container.",
											"default": {
												"${workspaceFolder}": "${containerAppRoot}"
											}
										}
									}
								},
								"description": "An array of image names and their respective source paths mapped from a local source. Any additional fields will be passed along to the respective language debugger. For example, justMyCode for the Python debugger.",
								"default": []
							}
						}
					},
					"attach": {
						"properties": {
							"language": {
								"type": "string",
								"enum": [
									"Node",
									"NETCore",
									"Java",
									"Python",
									"Go"
								],
								"description": "Programming language of the application being debugged.",
								"default": null
							},
							"debugPort": {
								"type": "number",
								"description": "Debug Port used on the container.",
								"default": 9229
							},
							"remoteRoot": {
								"type": "string",
								"description": "Absolute path to the remote directory containing the program",
								"default": "Path to the Remote Directory Containing the Program"
							},
							"podSelector": {
								"type": "object",
								"description": "Selector to choose debugging pod. Usually a dictionary where key is app and value is the name of the deployment will suffice. See https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ for more information.",
								"default": {
									"app": "deployment-name"
								}
							},
							"localRoot": {
								"type": "string",
								"description": "Path to the local directory containing the program",
								"default": "^\"\\${workspaceFolder}\""
							},
							"containerName": {
								"type": "string",
								"description": "Name of the container to be debugged. This field will only be used if more than one container is found in the pod.",
								"default": "container-name"
							},
							"protocol": {
								"type": "string",
								"enum": [
									"auto",
									"inspector",
									"legacy"
								],
								"description": "Node.js option: debug protocol to use",
								"default": "auto"
							},
							"justMyCode": {
								"type": "boolean",
								"description": "Python option: debug only user-written code.",
								"default": true
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Cloud Code: Run/Debug Kubernetes App",
						"description": "Configuration for running or debugging an app on a Kubernetes cluster",
						"body": {
							"name": "Kubernetes: Run/Debug",
							"type": "cloudcode.kubernetes",
							"request": "launch",
							"skaffoldConfig": "^\"\\${workspaceFolder}/skaffold.yaml\"",
							"watch": true,
							"cleanUp": true,
							"portForward": true
						}
					},
					{
						"label": "Cloud Code: Attach (NodeJS) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (NodeJS)",
						"body": {
							"name": "Attach to Kubernetes Pod (NodeJS)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Node",
							"debugPort": 9229,
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					},
					{
						"label": "Cloud Code: Attach (.NET Core) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (.NET Core)",
						"body": {
							"name": "Attach to Kubernetes Pod (.NET Core)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "NETCore",
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					},
					{
						"label": "Cloud Code: Attach (Java) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (Java)",
						"body": {
							"name": "Attach to Kubernetes Pod (Java)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Java",
							"debugPort": 50005,
							"podSelector": {
								"app": "deployment-name"
							}
						}
					},
					{
						"label": "Cloud Code: Attach (Python) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (Python)",
						"body": {
							"name": "Attach to Kubernetes Pod (Python)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Python",
							"debugPort": 3000,
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					},
					{
						"label": "Cloud Code: Attach (Go) to k8s Pod",
						"description": "Configuration for attaching a debugger to a kubernetes pod (Go)",
						"body": {
							"name": "Attach to Kubernetes Pod (Go)",
							"type": "cloudcode.kubernetes",
							"request": "attach",
							"language": "Go",
							"debugPort": 2345,
							"podSelector": {
								"app": "deployment-name"
							},
							"localRoot": "^\"\\${workspaceFolder}\"",
							"remoteRoot": "Path to the Remote Directory Containing the Program"
						}
					}
				]
			},
			{
				"type": "cloudcode.cloudrun",
				"label": "Cloud Code: Cloud Run",
				"configurationAttributes": {
					"launch": {
						"properties": {
							"service": {
								"type": "object",
								"description": "Service Settings",
								"properties": {
									"name": {
										"type": "string",
										"description": "Name of the service",
										"default": "service-name"
									},
									"containerPort": {
										"type": "number",
										"description": "Container Port",
										"default": 8080
									},
									"serviceAccountName": {
										"type": "string",
										"description": "Service Account",
										"default": ""
									},
									"env": {
										"type": "array",
										"description": "Environment Variables",
										"items": {
											"type": "object",
											"description": "Environment Variable",
											"properties": {
												"name": {
													"type": "string",
													"description": "name",
													"default": ""
												},
												"value": {
													"type": "string",
													"description": "value",
													"default": ""
												}
											}
										},
										"default": []
									},
									"cloudSqlInstances": {
										"type": "array",
										"description": "Cloud Sql Instances",
										"default": []
									},
									"resources": {
										"type": "object",
										"description": "resources",
										"properties": {
											"limits": {
												"type": "object",
												"description": "limits",
												"properties": {
													"cpu": {
														"type": "number",
														"description": "Container CPU limit. Limit is expressed as a number of CPU. Fractional CPU limits are allowed (e.g. 1.5).",
														"default": 1
													},
													"memory": {
														"type": "string",
														"description": "Memory in MiB",
														"default": "256Mi"
													}
												},
												"default": {
													"memory": "256Mi"
												}
											}
										},
										"default": {
											"limits": {
												"memory": "256Mi"
											}
										}
									}
								}
							},
							"image": {
								"type": "string",
								"description": "Name of the image",
								"default": "image-name"
							},
							"build": {
								"type": "object",
								"description": "Build Settings. Specify one of [docker, jib, buildpacks].",
								"properties": {
									"docker": {
										"type": "object",
										"description": "Builds image from a Dockerfile",
										"properties": {
											"path": {
												"type": "string",
												"description": "Dockerfile path",
												"default": "${workspaceFolder}/Dockerfile"
											},
											"target": {
												"type": "string",
												"description": "Dockerfile target name to build",
												"default": ""
											},
											"buildArgs": {
												"type": "object",
												"description": "Arguments passed to the docker build",
												"default": {}
											}
										}
									},
									"jibMaven": {
										"type": "object",
										"description": "Builds image using the Jib Maven Plugin",
										"properties": {
											"path": {
												"type": "string",
												"description": "Build file path. Ex: pom.xml, .mvn directory",
												"default": "${workspaceFolder}/pom.xml"
											},
											"project": {
												"type": "string",
												"description": "Java Project name. Ex: org.springframework.boot:frontend",
												"default": ""
											}
										}
									},
									"jibGradle": {
										"type": "object",
										"description": "Builds image using the Jib Gradle Plugin",
										"properties": {
											"path": {
												"type": "string",
												"description": "Build file path. Ex: build.gradle, gradle.properties, settings.gradle or the Gradle wrapper script (gradlew, gradlew.bat, or gradlew.cmd)",
												"default": "${workspaceFolder}/build.gradle"
											},
											"project": {
												"type": "string",
												"description": "Java Project name. Ex: org.springframework.boot:frontend",
												"default": ""
											}
										}
									},
									"buildpacks": {
										"type": "object",
										"description": "Builds image using Cloud Native Buildpacks",
										"properties": {
											"path": {
												"type": "string",
												"description": "Entry point file path.",
												"default": "${workspaceFolder}/package.json"
											},
											"builder": {
												"type": "string",
												"description": "Builder image used",
												"default": "heroku/buildpacks"
											},
											"env": {
												"type": "array",
												"description": "Environment Variables",
												"items": {
													"type": "object",
													"description": "Environment Variable",
													"properties": {
														"name": {
															"type": "string",
															"description": "name",
															"default": ""
														},
														"value": {
															"type": "string",
															"description": "value",
															"default": ""
														}
													}
												},
												"default": [
													{
														"name": "",
														"value": ""
													}
												]
											}
										}
									}
								}
							},
							"target": {
								"type": "object",
								"description": "Target to run the app. Only minikube is currently supported.",
								"properties": {
									"minikube": {
										"type": "object",
										"description": "Cloud Code managed minikube.",
										"properties": {}
									}
								},
								"default": {
									"minikube": {}
								}
							},
							"watch": {
								"type": "boolean",
								"description": "Watches for changes in the workspace and re-runs the application. Defaults to true.",
								"default": true
							},
							"debug": {
								"type": "object",
								"description": "Debug Settings",
								"properties": {
									"sourceFileMap": {
										"type": "object",
										"description": "Path mapping used by the debugger. The key is the local path and the value is the path on the remote container.",
										"default": {
											"${workspaceFolder}": "${containerAppRoot}"
										}
									}
								}
							}
						}
					}
				},
				"configurationSnippets": [
					{
						"label": "Cloud Code: Run/Debug Cloud Run App",
						"description": "Configuration for running and debugging a Cloud Run app locally",
						"body": {
							"name": "Cloud Run: Run/Debug Locally",
							"type": "cloudcode.cloudrun",
							"request": "launch",
							"build": {
								"docker": {
									"path": "${1:Dockerfile}"
								}
							},
							"image": "^\"\\${workspaceFolderBasename}\"",
							"service": {
								"name": "^\"\\${workspaceFolderBasename}\"",
								"containerPort": 8080,
								"resources": {
									"limits": {
										"memory": "256Mi"
									}
								}
							},
							"target": {
								"minikube": {}
							},
							"watch": true
						}
					}
				]
			}
		],
		"commands": [
			{
				"command": "cloudcode.refreshKubectlExplorer",
				"title": "Refresh Kubernetes Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubeDocs",
				"title": "Open Documentation",
				"icon": "$(question)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshCloudRunExplorer",
				"title": "Refresh Cloud Run Service Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshSecretsExplorer",
				"title": "Refresh Secrets Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.switchKubeConfig",
				"title": "Switch KubeConfig",
				"icon": {
					"light": "images/light/switch.svg",
					"dark": "images/dark/switch.svg"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.sharedExplorer.chooseProject",
				"title": "Switch Project",
				"icon": {
					"light": "images/light/switch.svg",
					"dark": "images/dark/switch.svg"
				},
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubeconfig",
				"title": "Open file",
				"icon": "$(link-external)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.removeKubeConfig",
				"title": "Remove from list",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.removeKubeConfigCommandPalette",
				"title": "Remove KubeConfig from Kubernetes Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.refreshKubectlCollection",
				"title": "Refresh",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlCluster",
				"title": "Set as Active Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlContext",
				"title": "Set as Active Context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.setKubectlNamespace",
				"title": "Set as Active Namespace",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlResource",
				"title": "Delete",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.describeKubectlResource",
				"title": "Describe",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.toggleApiExplorerCategories",
				"title": "Toggle Categories",
				"category": "Cloud Code",
				"icon": "$(list-unordered)"
			},
			{
				"command": "cloudcode.searchApi",
				"title": "Search for API",
				"category": "Cloud Code",
				"icon": "$(search)"
			},
			{
				"command": "cloudcode.metricsKubectlResource",
				"title": "View Metrics",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.getKubectlContainerTerminal",
				"title": "Get Terminal",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubernetesDashboard",
				"title": "Open Kubernetes Dashboard",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.copyResourceValue",
				"title": "Copy Resource Name",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.copyLeafValue",
				"title": "Copy Value",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.applyTriggerYaml",
				"title": "Apply Trigger",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openKubectlAddress",
				"title": "Open Address",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.gke.switchAccount",
				"title": "Switch Account",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/switch-account.svg",
					"dark": "images/dark/switch-account.svg"
				}
			},
			{
				"command": "cloudcode.diffConfiguration",
				"title": "Diff current JSON/YAML file with k8s deployed resource",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createConfiguration",
				"title": "Create Kubernetes resource from current file",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.applyConfiguration",
				"title": "Apply current JSON/YAML file to k8s deployed resource",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.dryrun.configuration.serverside",
				"title": "Dry-run current config for server-side validation",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.dryrun.configuration.clientside",
				"title": "Dry-run current config for client-side validation",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlCluster",
				"title": "Remove Context Under Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.manageCustomRepos",
				"title": "Manage Custom Application Template Repositories",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deleteKubectlContext",
				"title": "Remove Context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createK8sAppExplorerTitle",
				"title": "Create new Kubernetes App",
				"category": "Cloud Code",
				"icon": "$(new-folder)"
			},
			{
				"command": "cloudcode.runK8sAppExplorerTitle",
				"title": "Run App on Cluster",
				"category": "Cloud Code",
				"icon": "$(play)"
			},
			{
				"command": "cloudcode.debugK8sAppExplorerTitle",
				"title": "Debug App on Cluster",
				"category": "Cloud Code",
				"icon": "$(debug)"
			},
			{
				"command": "cloudcode.createNewApp",
				"title": "New Application",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.createCloudRunAppExplorerTitle",
				"title": "Create new Cloud Run App",
				"category": "Cloud Code",
				"icon": "$(new-folder)"
			},
			{
				"command": "cloudcode.runCloudRunAppExplorerTitle",
				"title": "Run App on Local Cloud Run Emulator",
				"category": "Cloud Code",
				"icon": "$(play)"
			},
			{
				"command": "cloudcode.debugCloudRunAppExplorerTitle",
				"title": "Debug App on Local Cloud Run Emulator",
				"category": "Cloud Code",
				"icon": "$(debug)"
			},
			{
				"command": "cloudcode.cloudRunOpenDocs",
				"title": "Open Documentation",
				"category": "Cloud Code",
				"icon": "$(question)"
			},
			{
				"command": "cloudcode.cloudRunDeployRevision",
				"title": "Deploy to Cloud Run",
				"category": "Cloud Code",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "cloudcode.cloudRunDeployService",
				"title": "Deploy to Cloud Run",
				"category": "Cloud Code",
				"icon": "$(cloud-upload)"
			},
			{
				"command": "cloudcode.cloudRunViewLogs",
				"title": "View Logs",
				"category": "Cloud Code",
				"icon": {
					"light": "images/light/logging.svg",
					"dark": "images/dark/logging.svg"
				}
			},
			{
				"command": "cloudcode.cloudRunOpenInConsole",
				"title": "Open in Cloud Console",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.cloudRunOpenEndpoint",
				"title": "Open URL",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.cloudRunOpenContainerImage",
				"title": "Open Container Image URL",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.sharedExplorer.enableApi",
				"title": "Enable API",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.runKubernetesApp",
				"title": "Run on Kubernetes",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.debugKubernetesApp",
				"title": "Debug on Kubernetes",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.runCloudRunApp",
				"title": "Run on Cloud Run Emulator",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.debugCloudRunApp",
				"title": "Debug on Cloud Run Emulator",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.deployCloudRunApp",
				"title": "Deploy to Cloud Run",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.welcome",
				"title": "Welcome",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.changeLogs",
				"title": "Change Logs",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openApiDetail",
				"title": "Open API detail page",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openCloudShellReadme",
				"title": "Welcome to Remote Development",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.openMinikubeDashboard",
				"title": "Open minikube dashboard to start/stop local cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.statusbarCommand",
				"category": "Cloud Code",
				"title": "Open Cloud Code Status Bar Menu"
			},
			{
				"command": "cloudcode.openMinikubeDashboardContext",
				"title": "Open minikube dashboard",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.toggleAwsExplorer",
				"title": "Toggle AWS Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.toggleAzureExplorer",
				"title": "Toggle Azure Explorer",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.mountSecretVolume",
				"title": "Mount Secret as Volume",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.addSecretEnvironmentVariable",
				"title": "Add Secret as Environment Variable",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.openDocs",
				"title": "Open Documentation",
				"category": "Cloud Code",
				"icon": "$(question)"
			},
			{
				"command": "cloudcode.secrets.viewVersionValue",
				"title": "Show Version Value",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.enableVersion",
				"title": "Enable Version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.disableVersion",
				"title": "Disable Version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.destroyVersion",
				"title": "Destroy Version",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.createVersion",
				"title": "Create Secret Version",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.secrets.createVersionWithText",
				"title": "Add Version to Secret in Secret Manager...",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.create",
				"title": "Create Secret",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.secrets.createWithText",
				"title": "Create Secret in Secret Manager...",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.openCloudConsole",
				"title": "Open in Cloud Console",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.editPermissions",
				"title": "Edit Permissions in Cloud Console",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.secrets.search",
				"title": "Search for Secret",
				"category": "Cloud Code",
				"icon": "$(search)"
			},
			{
				"command": "cloudcode.secrets.createLabel",
				"title": "Create Label",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.secrets.editLabel",
				"title": "Edit Label",
				"category": "Cloud Code",
				"icon": "$(edit)"
			},
			{
				"command": "cloudcode.secrets.copyResourceId",
				"title": "Copy Resource ID",
				"category": "Cloud Code",
				"icon": "$(clippy)"
			},
			{
				"command": "cloudcode.secrets.showCodingInstructions",
				"title": "Show Coding Instructions",
				"category": "Cloud Code",
				"icon": "$(code)"
			},
			{
				"command": "cloudcode.openLogsViewer",
				"title": "View Logs",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.reportIssueOnGithub",
				"title": "Report Extension Issue on Github",
				"category": "Cloud Code",
				"icon": "$(report)"
			},
			{
				"command": "cloudcode.viewKubectlYaml",
				"title": "View YAML",
				"category": "Cloud Code",
				"icon": "$(file-symlink-file)"
			},
			{
				"command": "cloudcode.editKubectlYaml",
				"title": "Edit YAML",
				"category": "Cloud Code",
				"icon": "$(edit)"
			},
			{
				"command": "cloudcode.scaleDeployment",
				"title": "Scale Deployment",
				"icon": "$(edit)"
			},
			{
				"command": "cloudcode.gke.refreshGkeExplorer",
				"title": "Refresh GKE cluster explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.createCluster",
				"title": "Create GKE cluster",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.gke.addCluster",
				"title": "Search for GKE clusters to set as current context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.openClusterInConsole",
				"title": "Open in Google Cloud Console",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.sharedExplorer.openProjectInConsole",
				"title": "Open in Google Cloud Console",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.gke.openUrl",
				"title": "Open URL",
				"category": "Cloud Code",
				"icon": "$(link-external)"
			},
			{
				"command": "cloudcode.gke.addClusterContextMenu",
				"title": "Set as Active Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.deleteGkeCluster",
				"title": "Delete Cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.runGcloudInit",
				"title": "Initialize Google Cloud SDK",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.gcloudSignout",
				"title": "Signout of all accounts in Google Cloud SDK",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.gke.gcloudSignoutContext",
				"title": "Sign out of Google Cloud SDK",
				"category": "Cloud Code",
				"icon": "$(sign-out)"
			},
			{
				"command": "cloudcode.gke.copyValue",
				"title": "Copy Value",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.createCluster",
				"title": "Create Azure Kubernetes cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.refreshAzureExplorer",
				"title": "Refresh Azure cluster explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.addClusterContextMenu",
				"title": "Add Azure cluster to kubeconfig",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.azure.deleteAzureCluster",
				"title": "Delete Azure cluster",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.createCluster",
				"title": "Create AWS EKS Cluster Stack",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.refreshClusterExplorer",
				"title": "Refresh AWS EKS Explorer",
				"icon": "$(refresh)",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.setCurrentContext",
				"title": "Set as Current Context",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.aws.deleteAwsCluster",
				"title": "Delete Cluster Stack",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.shell.openRecent",
				"title": "Open in Cloud Shell...",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.exportCoverage",
				"title": "INTERNAL: Export Code Coverage",
				"category": "Cloud Code"
			},
			{
				"command": "cloudcode.addClusterToConfig",
				"title": "Add a GKE cluster to the KubeConfig",
				"category": "Cloud Code",
				"icon": "$(add)"
			},
			{
				"command": "cloudcode.softwareLicensesPrivacyPolicy",
				"title": "Show Software Licenses and Privacy",
				"category": "Cloud Code"
			}
		],
		"menus": {
			"commandPalette": [
				{
					"command": "cloudcode.removeKubeConfig",
					"when": "false"
				},
				{
					"command": "cloudcode.openMinikubeDashboard",
					"when": "false"
				},
				{
					"command": "cloudcode.openMinikubeDashboardContext",
					"when": "false"
				},
				{
					"command": "cloudcode.toggleAwsExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.toggleAzureExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.toggleApiExplorerCategories",
					"when": "false"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "false"
				},
				{
					"command": "cloudcode.sharedExplorer.enableApi",
					"when": "false"
				},
				{
					"command": "cloudcode.openApiDetail",
					"when": "false"
				},
				{
					"command": "cloudcode.sharedExplorer.chooseProject",
					"when": "false"
				},
				{
					"command": "cloudcode.copyLeafValue",
					"when": "false"
				},
				{
					"command": "cloudcode.applyTriggerYaml",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunDeployRevision",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunDeployService",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunViewLogs",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenInConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenEndpoint",
					"when": "false"
				},
				{
					"command": "cloudcode.cloudRunOpenContainerImage",
					"when": "false"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.switchAccount",
					"when": "false"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "false"
				},
				{
					"command": "cloudcode.scaleDeployment",
					"when": "false"
				},
				{
					"command": "cloudcode.openKubectlAddress",
					"when": "false"
				},
				{
					"command": "cloudcode.mountSecretVolume",
					"when": "false"
				},
				{
					"command": "cloudcode.changeLogs",
					"when": "false"
				},
				{
					"command": "cloudcode.addSecretEnvironmentVariable",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.openDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.viewVersionValue",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.enableVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.disableVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.destroyVersion",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.openCloudConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.editPermissions",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.createVersionWithText",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.createWithText",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.createLabel",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.editLabel",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "false"
				},
				{
					"command": "cloudcode.secrets.showCodingInstructions",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.deleteGkeCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.addClusterContextMenu",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.openClusterInConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.sharedExplorer.openProjectInConsole",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.openUrl",
					"when": "false"
				},
				{
					"command": "cloudcode.openKubeconfig",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.runGcloudInit",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.gcloudSignout",
					"when": "!runningOnCloudShell"
				},
				{
					"command": "cloudcode.gke.gcloudSignoutContext",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.copyValue",
					"when": "false"
				},
				{
					"command": "cloudcode.azure.deleteAzureCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.azure.addClusterContextMenu",
					"when": "false"
				},
				{
					"command": "cloudcode.aws.deleteAwsCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.aws.setCurrentContext",
					"when": "false"
				},
				{
					"command": "cloudcode.aws.createCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.azure.createCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.exportCoverage",
					"when": "cloudcode.exportCoverageVisible"
				},
				{
					"command": "cloudcode.addClusterToConfig",
					"when": "false"
				},
				{
					"command": "cloudcode.shell.openRecent",
					"when": "!runningOnCloudShell"
				},
				{
					"command": "cloudcode.refreshCloudRunExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.createCloudRunAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.runCloudRunAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.debugCloudRunAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshSecretsExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "false"
				},
				{
					"command": "cloudcode.aws.refreshClusterExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.azure.refreshAzureExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.gke.refreshGkeExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.openKubeDocs",
					"when": "false"
				},
				{
					"command": "cloudcode.refreshKubectlExplorer",
					"when": "false"
				},
				{
					"command": "cloudcode.createK8sAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.runK8sAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.debugK8sAppExplorerTitle",
					"when": "false"
				},
				{
					"command": "cloudcode.deleteKubectlCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.deleteKubectlContext",
					"when": "false"
				},
				{
					"command": "cloudcode.setKubectlCluster",
					"when": "false"
				},
				{
					"command": "cloudcode.setKubectlContext",
					"when": "false"
				},
				{
					"command": "cloudcode.setKubectlNamespace",
					"when": "false"
				},
				{
					"command": "cloudcode.reportIssueOnGithub",
					"when": "!runningInTheia"
				},
				{
					"command": "cloudcode.openCloudShellReadme",
					"when": "runningOnCloudShell && !runningInTheia"
				}
			],
			"view/title": [
				{
					"command": "cloudcode.addClusterToConfig",
					"when": "view == cloudcode.kubectlExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.createK8sAppExplorerTitle",
					"when": "isConfigLessExperienceEnabled && view == cloudcode.kubectlExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.runK8sAppExplorerTitle",
					"when": "isConfigLessExperienceEnabled && view == cloudcode.kubectlExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.debugK8sAppExplorerTitle",
					"when": "isConfigLessExperienceEnabled && view == cloudcode.kubectlExplorer",
					"group": "navigation@4"
				},
				{
					"command": "cloudcode.refreshKubectlExplorer",
					"when": "view == cloudcode.kubectlExplorer",
					"group": "navigation@5"
				},
				{
					"command": "cloudcode.openKubeDocs",
					"when": "view == cloudcode.kubectlExplorer"
				},
				{
					"command": "cloudcode.reportIssueOnGithub",
					"when": "view == cloudcode.kubectlExplorer && !runningInTheia"
				},
				{
					"command": "cloudcode.refreshSecretsExplorer",
					"when": "view == cloudcode.secretsExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.toggleAwsExplorer",
					"when": "view == cloudcode.kubectlExplorer && !runningOnCloudShell"
				},
				{
					"command": "cloudcode.toggleAzureExplorer",
					"when": "view == cloudcode.kubectlExplorer && !runningOnCloudShell"
				},
				{
					"command": "cloudcode.gke.createCluster",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.createCloudRunAppExplorerTitle",
					"when": "isConfigLessExperienceEnabled && view == cloudcode.cloudRunExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.runCloudRunAppExplorerTitle",
					"when": "isConfigLessExperienceEnabled && view == cloudcode.cloudRunExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.debugCloudRunAppExplorerTitle",
					"when": "isConfigLessExperienceEnabled && view == cloudcode.cloudRunExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.cloudRunDeployService",
					"when": "view == cloudcode.cloudRunExplorer",
					"group": "navigation@4"
				},
				{
					"command": "cloudcode.refreshCloudRunExplorer",
					"when": "view == cloudcode.cloudRunExplorer",
					"group": "navigation@5"
				},
				{
					"command": "cloudcode.cloudRunOpenDocs",
					"when": "view == cloudcode.cloudRunExplorer"
				},
				{
					"command": "cloudcode.gke.refreshGkeExplorer",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "navigation@3"
				},
				{
					"command": "cloudcode.azure.refreshAzureExplorer",
					"when": "view == cloudcode.azure.clusterExplorer",
					"group": "navigation"
				},
				{
					"command": "cloudcode.azure.createCluster",
					"when": "view == cloudcode.azure.clusterExplorer"
				},
				{
					"command": "cloudcode.aws.refreshClusterExplorer",
					"when": "view == cloudcode.aws.clusterExplorer",
					"group": "navigation"
				},
				{
					"command": "cloudcode.aws.createCluster",
					"when": "view == cloudcode.aws.clusterExplorer"
				},
				{
					"command": "cloudcode.searchApi",
					"when": "view == cloudcode.apiExplorer",
					"group": "navigation@0"
				},
				{
					"command": "cloudcode.secrets.openDocs",
					"when": "view == cloudcode.secretsExplorer",
					"group": "navigation@4"
				},
				{
					"command": "cloudcode.secrets.create",
					"when": "view == cloudcode.secretsExplorer",
					"group": "navigation@1"
				},
				{
					"command": "cloudcode.secrets.search",
					"when": "view == cloudcode.secretsExplorer",
					"group": "navigation@2"
				},
				{
					"command": "cloudcode.toggleApiExplorerCategories",
					"when": "view == cloudcode.apiExplorer",
					"group": "navigation@1"
				}
			],
			"explorer/context": [
				{
					"command": "cloudcode.applyTriggerYaml",
					"when": "resourceScheme == file && resourceLangId == yaml && resourceFilename =~ /trigger/ig",
					"group": "6_copypath"
				}
			],
			"editor/context": [
				{
					"command": "cloudcode.secrets.createWithText",
					"when": "editorTextFocus",
					"group": "cloudcode@1"
				},
				{
					"command": "cloudcode.secrets.createVersionWithText",
					"when": "editorTextFocus",
					"group": "cloudcode@1"
				}
			],
			"view/item/context": [
				{
					"command": "cloudcode.setKubectlCluster",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeCluster",
					"group": "1"
				},
				{
					"command": "cloudcode.setKubectlContext",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeContextObject",
					"group": "1"
				},
				{
					"command": "cloudcode.openKubernetesDashboard",
					"when": "view == cloudcode.kubectlExplorer && viewItem == activeKubeCluster",
					"group": "2"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeGenericCollection",
					"group": "2"
				},
				{
					"command": "cloudcode.setKubectlNamespace",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "1"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?DeploymentObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?PodObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeContainer",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubectlIPObject",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeSecretNode",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeEvent",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigKeyNode",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigMapNode",
					"group": "8"
				},
				{
					"command": "cloudcode.copyResourceValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(AutoGke)?NodeObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.copyLeafValue",
					"when": "view == cloudcode.kubectlExplorer && viewItem == leafObject",
					"group": "8"
				},
				{
					"command": "cloudcode.switchKubeConfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigPathObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.switchKubeConfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == defaultKubeConfigObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.sharedExplorer.chooseProject",
					"when": "viewItem == ProjectObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.openKubeconfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigPathObject",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.openKubeconfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == defaultKubeConfigObject",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.removeKubeConfig",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeConfigPathObject",
					"group": "2"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(AutoGke)?NodeObject/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.gke.switchAccount",
					"when": "!runningOnCloudShell && view == cloudcode.gke.clusterExplorer && viewItem == activeAccount",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.gke.gcloudSignoutContext",
					"when": "!runningOnCloudShell && viewItem == ProjectObject",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?DeploymentObject/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?PodObject/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.viewKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.cloudRunDeployRevision",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunManagedServiceObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.cloudRunDeployRevision",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunAnthosServiceObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.cloudRunViewLogs",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunManagedServiceObject",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.cloudRunViewLogs",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunAnthosServiceObject",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.cloudRunViewLogs",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunServiceRevisionObject",
					"group": "inline@2"
				},
				{
					"command": "cloudcode.cloudRunViewLogs",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunServiceRevisionObject",
					"group": "10"
				},
				{
					"command": "cloudcode.cloudRunOpenContainerImage",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunServiceRevisionObject",
					"group": "0"
				},
				{
					"command": "cloudcode.cloudRunOpenContainerImage",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunAnthosRevisionObject",
					"group": "0"
				},
				{
					"command": "cloudcode.cloudRunViewLogs",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunManagedServiceObject",
					"group": "10"
				},
				{
					"command": "cloudcode.cloudRunViewLogs",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunAnthosServiceObject",
					"group": "10"
				},
				{
					"command": "cloudcode.cloudRunDeployService",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunManagedServiceObject",
					"group": "10"
				},
				{
					"command": "cloudcode.cloudRunDeployService",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunAnthosServiceObject",
					"group": "10"
				},
				{
					"command": "cloudcode.cloudRunOpenInConsole",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunManagedServiceObject",
					"group": "0"
				},
				{
					"command": "cloudcode.cloudRunOpenInConsole",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunAnthosServiceObject",
					"group": "0"
				},
				{
					"command": "cloudcode.cloudRunOpenEndpoint",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunManagedServiceObject",
					"group": "0"
				},
				{
					"command": "cloudcode.cloudRunOpenEndpoint",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == CloudRunAnthosServiceObject",
					"group": "0"
				},
				{
					"command": "cloudcode.scaleDeployment",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentReplicaObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System)?DeploymentObject/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System)?PodObject/",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.editKubectlYaml",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.mountSecretVolume",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System)?DeploymentObject/",
					"group": "3"
				},
				{
					"command": "cloudcode.addSecretEnvironmentVariable",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System)?DeploymentObject/",
					"group": "3"
				},
				{
					"command": "cloudcode.openKubectlAddress",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubectlIPObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?DeploymentObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?PodObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(AutoGke)?NodeObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.describeKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "8"
				},
				{
					"command": "cloudcode.metricsKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?PodObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.metricsKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(AutoGke)?NodeObject/",
					"group": "8"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeDeploymentCollection",
					"group": "8"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?DeploymentObject/",
					"group": "1"
				},
				{
					"command": "cloudcode.refreshKubectlCollection",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubePodCollection",
					"group": "8"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System|AutoGkeSystem)?PodObject/",
					"group": "1"
				},
				{
					"command": "cloudcode.openLogsViewer",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeContainer",
					"group": "1"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeNamespace",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeResource",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System)?DeploymentObject/",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System)?PodObject/",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeIngressObject",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlResource",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeNodeObject",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlCluster",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeCluster",
					"group": "9"
				},
				{
					"command": "cloudcode.deleteKubectlContext",
					"when": "view == cloudcode.kubectlExplorer && viewItem == inactiveKubeContextObject",
					"group": "9"
				},
				{
					"command": "cloudcode.getKubectlContainerTerminal",
					"when": "view == cloudcode.kubectlExplorer && viewItem == kubeContainer",
					"group": "2"
				},
				{
					"command": "cloudcode.getKubectlContainerTerminal",
					"when": "view == cloudcode.kubectlExplorer && viewItem =~ /kube(System)?PodObject/",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Enabled",
					"group": "1"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Disabled",
					"group": "1"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Enabled",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Disabled",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.showCodingInstructions",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Enabled",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.showCodingInstructions",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Disabled",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.viewVersionValue",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Enabled",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.disableVersion",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Enabled",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.enableVersion",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Disabled",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.destroyVersion",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Enabled",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.destroyVersion",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionObject_Disabled",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.createVersion",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesVersionsObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.copyResourceId",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretObject",
					"group": "1"
				},
				{
					"command": "cloudcode.secrets.openCloudConsole",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretObject",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.editPermissions",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretObject",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.createVersion",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretObject",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.editPermissions",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesPermissionObject",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.editPermissions",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesPermissionsObject",
					"group": "2"
				},
				{
					"command": "cloudcode.secrets.createLabel",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesLabelsObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.secrets.editLabel",
					"when": "view == cloudcode.secretsExplorer && viewItem == SecretsPropertiesLabelObject",
					"group": "inline@1"
				},
				{
					"command": "cloudcode.gke.openClusterInConsole",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeClusterObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.sharedExplorer.openProjectInConsole",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeProjectObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.sharedExplorer.openProjectInConsole",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeDefaultProjectObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.gke.openUrl",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == urlObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.gke.openUrl",
					"when": "view == cloudcode.cloudRunExplorer && viewItem == urlObject",
					"group": "inline"
				},
				{
					"command": "cloudcode.gke.deleteGkeCluster",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.addClusterContextMenu",
					"when": "view == cloudcode.gke.clusterExplorer && viewItem == gkeClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.copyValue",
					"when": "view == cloudcode.gke.clusterExplorer",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.copyValue",
					"when": "view == cloudcode.cloudRunExplorer",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.copyValue",
					"when": "view == cloudcode.cloudRunProperties",
					"group": "10"
				},
				{
					"command": "cloudcode.gke.copyValue",
					"when": "view == cloudcode.secretsExplorer && viewItem != SecretObject && viewItem != SecretsPropertiesVersionObject_Enabled && viewItem != SecretsPropertiesVersionObject_Disabled",
					"group": "10"
				},
				{
					"command": "cloudcode.azure.deleteAzureCluster",
					"when": "view == cloudcode.azure.clusterExplorer && viewItem == azureClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.azure.addClusterContextMenu",
					"when": "view == cloudcode.azure.clusterExplorer && viewItem == azureClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.aws.deleteAwsCluster",
					"when": "view == cloudcode.aws.clusterExplorer && viewItem == awsClusterObject",
					"group": "10"
				},
				{
					"command": "cloudcode.aws.setCurrentContext",
					"when": "view == cloudcode.aws.clusterExplorer && viewItem == awsClusterObject",
					"group": "10"
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "1-kubernetesContainer",
					"icon": "images/kubernetes_logo.svg",
					"title": "Cloud Code - Kubernetes"
				},
				{
					"id": "2-cloudRunContainer",
					"icon": "images/cloud_run_logo.svg",
					"title": "Cloud Code - Cloud Run"
				},
				{
					"id": "3-cloudApiContainer",
					"icon": "images/cloud_api_logo.svg",
					"title": "Cloud Code - Cloud APIs"
				},
				{
					"id": "4-cloudSecretsContainer",
					"icon": "images/secrets_logo.svg",
					"title": "Cloud Code - Secret Manager"
				}
			]
		},
		"views": {
			"1-kubernetesContainer": [
				{
					"id": "cloudcode.kubectlExplorer",
					"name": "Kubernetes"
				},
				{
					"id": "cloudcode.gke.clusterExplorer",
					"name": "Google Kubernetes Engine Explorer"
				},
				{
					"id": "cloudcode.azure.clusterExplorer",
					"name": "Azure Kubernetes Explorer",
					"when": "cloudcode.azureExplorerVisible"
				},
				{
					"id": "cloudcode.aws.clusterExplorer",
					"name": "AWS EKS Cluster Explorer",
					"when": "cloudcode.awsExplorerVisible"
				}
			],
			"2-cloudRunContainer": [
				{
					"id": "cloudcode.cloudRunExplorer",
					"name": "Cloud Run"
				}
			],
			"3-cloudApiContainer": [
				{
					"id": "cloudcode.apiExplorer",
					"name": ""
				}
			],
			"4-cloudSecretsContainer": [
				{
					"id": "cloudcode.secretsExplorer",
					"name": ""
				}
			]
		}
	},
	"scripts": {
		"copy:markdowns": "copyfiles -u 1 \"cloud-code-vscode/*.md\" ./",
		"vscode:uninstall": "node ./dist/uninstall_hook.js",
		"vscode:prepublish": "npm run compile:prod && cd ./src/webview && npm run build && cd ../../third_party/yaml-language-server && npm run compile-prod && cd ../../ && npm run copy:markdowns",
		"compile": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --mode none && cd ./src/webview && npm run build && cd ../../third_party/yaml-language-server/ && npm run compile",
		"compile:dev": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --mode development && cd ./src/webview && npm run build:dev && cd ../../third_party/yaml-language-server/ && npm run compile",
		"compile:prod": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --mode production",
		"compile:nomaps": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --mode none --maps bypass && cd ./src/webview && npm run build && cd ../../third_party/yaml-language-server/ && npm run compile",
		"compile:yls": "cd third_party/yaml-language-server && npm run compile",
		"compile:ext:coverage": "cross-env NODE_OPTIONS=--max_old_space_size=8192 webpack --config webpack.coverage.config.ts --mode none",
		"compile:yls:coverage": "cd ./third_party/yaml-language-server && npm run compile-coverage",
		"compile:electron": "node -e \"process.exit(process.env.KOKORO_GFILE_DIR ? 0 : 1)\" || \"./node_modules/.bin/electron-rebuild\"",
		"watch": "run-p watch:app watch:webview watch:yaml",
		"watch:app": "cross-env NODE_OPTIONS=--max_old_space_size=8092 webpack --mode development --watch --info-verbosity verbose",
		"watch:webview": "cd src/webview && npm run watch:dev",
		"watch:yaml": "cd third_party/yaml-language-server && npm run watch",
		"watch:kubernetes:test": "tsc -watch -p ./",
		"copy-node-pty-binaries-from-install": "gulp copyNodePtyBinariesFromInstall",
		"download-and-copy-node-pty-binaries-from-vscode-test": "gulp downloadAndCopyNodePtyBinariesFromVscodeTest",
		"watch:cloud-debug": "tsc -watch -p ./",
		"postinstall": "npm run compile:electron && cd ./src/webview && npm install && cd ../../third_party/yaml-language-server && npm install",
		"test:compile": "tsc -p . && npm run compile:yls && cd ./src/webview && npm run test-build",
		"pretest": "npm run test:compile",
		"test": "npm run download-and-copy-node-pty-binaries-from-vscode-test && cross-env CODE_TESTS_PATH=$INIT_CWD/dist/test node ./dist/test/runTest.js && cd ./src/webview && npm run test && cd ../../third_party/yaml-language-server && npm run test",
		"test:localdev": "npm run copy-node-pty-binaries-from-vscode-test && npm run test",
		"posttest": "npm run lint",
		"test:extension": "cross-env CODE_TESTS_PATH=$INIT_CWD/dist/test node ./dist/test/runTest.js",
		"test:extension:novs": "mocha --config .mocharc.json",
		"test:ui:setup": "extest setup-tests && extest install-from-marketplace golang.go ms-python.python vscjava.vscode-java-pack ms-dotnettools.csharp",
		"pretest:ui:deploy": "npm run test:compile",
		"test:ui:deploy": "extest run-tests \"dist/ui-test/deploy-tests/*.test.js\" --mocha_config config.mocharc.js",
		"pretest:ui:nondeploy": "npm run test:compile",
		"test:ui:nondeploy": "extest run-tests \"dist/ui-test/non-deploy-tests/*.test.js\" --mocha_config config.mocharc.js",
		"pretest:ui:setup:deploy": "npm run test:compile && npm run test:ui:setup",
		"test:ui:setup:deploy": "extest setup-and-run \"dist/ui-test/deploy-tests/*.test.js\" --mocha_config config.mocharc.js",
		"pretest:ui:setup:nondeploy": "npm run test:compile",
		"test:ui:setup:nondeploy": "extest setup-and-run \"dist/ui-test/non-deploy-tests/*.test.js\" --mocha_config config.mocharc.js",
		"lint": "gts check && npm run lint:markdown && cd ./src/webview && npm run lint && cd ../../third_party/yaml-language-server/ && npm run check",
		"lint:markdown": "markdownlint --ignore \"**/node_modules/**\" --ignore pull_request_template.md \"**/*.md\" --ignore \"test-resources/**\"  --ignore \"krm_catalog/**\" --ignore \"cloud-code-vscode\"",
		"lint:fix": "cross-env NODE_OPTIONS=--max_old_space_size=8192 gts fix && cd ./src/webview && npm run fix && cd ../../third_party/yaml-language-server && npm run fix",
		"clean": "gts clean && cd ./third_party/yaml-language-server && npm run clean",
		"package": "vsce package",
		"package:lsp": "cd ./third_party/yaml-language-server && npm run pkg",
		"prerelease:release": "node ./tools/release_prerelease.js",
		"prerelease:bumpversion": "node ./tools/prerelease_version_bump.js",
		"fix": "npm run lint:fix"
	},
	"devDependencies": {
		"@angular-devkit/build-angular": "^0.1100.3",
		"@angular/cli": "^7.0.4",
		"@angular/compiler-cli": "^7.2.10",
		"@angular/language-service": "^7.2.10",
		"@types/async-lock": "^1.1.1",
		"@types/decompress": "^4.2.3",
		"@types/enhanced-resolve": "^3.0.6",
		"@types/fs-extra": "^8.0.0",
		"@types/get-port": "^4.0.1",
		"@types/glob": "^5.0.35",
		"@types/gulp": "^4.0.8",
		"@types/istanbul": "^0.4.30",
		"@types/js-yaml": "^3.11.2",
		"@types/lodash": "^4.14.112",
		"@types/long": "^4.0.0",
		"@types/lru-cache": "^5.1.0",
		"@types/mocha": "^7.0.0",
		"@types/moment": "^2.13.0",
		"@types/ncp": "^2.0.3",
		"@types/node": "^10.12.29",
		"@types/node-fetch": "^2.1.4",
		"@types/prettier": "^1.16.1",
		"@types/proper-lockfile": "^4.1.1",
		"@types/query-string": "^6.2.0",
		"@types/request": "^2.48.4",
		"@types/semver": "^5.5.0",
		"@types/shell-quote": "^1.6.1",
		"@types/shelljs": "^0.8.0",
		"@types/string-argv": "^0.1.0",
		"@types/tmp": "0.0.33",
		"@types/uuid": "^3.4.3",
		"@types/vscode": "^1.49.0",
		"@types/webdriverio": "^4.8.0",
		"@types/webpack": "^4.4.32",
		"@types/webpack-node-externals": "^1.6.3",
		"@types/xml2js": "^0.4.5",
		"@types/yaml": "^1.0.1",
		"body-parser": "^1.19.0",
		"copyfiles": "^2.4.1",
		"cross-env": "^5.2.0",
		"electron": "^7.2.1",
		"electron-rebuild": "^1.8.8",
		"fork-ts-checker-webpack-plugin": "^5.2.0",
		"gts": "1.1.0",
		"gulp": "^4.0.2",
		"istanbul": "^0.4.5",
		"istanbul-instrumenter-loader": "^3.0.1",
		"loader-utils": "^1.2.3",
		"markdownlint-cli": "^0.16.0",
		"mocha": "^7.0.0",
		"ncp": "^2.0.0",
		"node-loader": "^0.6.0",
		"node-sass": "^4.14.1",
		"npm-run-all": "^4.1.5",
		"prettier": "^1.19.1",
		"remap-istanbul": "^0.11.1",
		"robotjs": "^0.6.0",
		"source-map-support": "^0.5.4",
		"spectron": "^6.0.0",
		"spectron-keys": "0.0.1",
		"ts-loader": "^5.3.3",
		"ts-node": "^9.0.0",
		"tslint": "^5.18.0",
		"typemoq": "^2.1.0",
		"typescript": "^3.8.3",
		"typescript-json-schema": "^0.40.0",
		"vsce": "^1.51.1",
		"vscode-extension-tester": "^3.2.2",
		"vscode-extension-tester-native": "^3.0.0",
		"vscode-test": "^1.0.0",
		"webpack": "^4.32.2",
		"webpack-cli": "^3.3.2",
		"webpack-node-externals": "^1.7.2",
		"yarn": "^1.15.2"
	},
	"dependencies": {
		"@octokit/rest": "^15.12.0",
		"async-lock": "^1.2.0",
		"aws-sdk": "^2.424.0",
		"csvtojson": "^2.0.10",
		"decache": "^4.4.0",
		"decompress": "^4.2.1",
		"find-process": "^1.2.1",
		"fs-extra": "^8.1.0",
		"get-port": "^4.0.1",
		"glob": "^7.1.2",
		"googleapis": "^61.0.0",
		"http-status-codes": "^1.3.0",
		"is-elevated": "^2.0.1",
		"js-yaml": "^3.13.1",
		"lodash": "^4.17.20",
		"long": "^4.0.0",
		"lru-cache": "^5.1.0",
		"moment": "^2.27.0",
		"node-fetch": "^2.6.1",
		"node-pty": "^0.9.0",
		"p-queue": "^6.3.0",
		"proper-lockfile": "^4.1.2",
		"query-string": "^6.2.0",
		"request": "^2.88.0",
		"semver": "^5.6.0",
		"shell-quote": "^1.6.1",
		"shelljs": "^0.8.2",
		"simple-git": "^2.12.0",
		"string-argv": "^0.1.0",
		"tmp": "0.0.33",
		"tree-kill": "^1.2.2",
		"uuid": "^3.3.2",
		"vscode-debugadapter": "^1.31.0",
		"vscode-debugprotocol": "^1.31.0",
		"vscode-languageclient": "^5.2.1",
		"xml2js": "^0.4.23"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/GoogleCloudPlatform/cloud-code-vscode.git"
	},
	"bugs": {
		"url": "https://github.com/GoogleCloudPlatform/cloud-code-vscode/issues"
	},
	"__metadata": {
		"id": "5e8803a2-3dc8-42b3-9c5f-ea9d37828c03",
		"publisherId": "f24fd523-af08-49d8-bb0b-f4eda502706e",
		"publisherDisplayName": "Google Cloud"
	}
}